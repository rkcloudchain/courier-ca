package config

import (
	"time"

	cfsslcfg "github.com/cloudflare/cfssl/config"
	"github.com/pkg/errors"
	"github.com/rkcloudchain/rksync-ca/api"
	"github.com/spf13/viper"
)

const (
	// DefaultServerPort is the default listening port for the rksync-ca server
	DefaultServerPort = 8054

	// DefaultServerAddr is the default listening address for the rksync-ca server
	DefaultServerAddr = "0.0.0.0"
)

// ServerConfig is the rksync-ca server's configuration
type ServerConfig struct {
	// Listening port for the server
	Port int `def:"8054" opt:"p" help:"Listening port of rksync-ca-server"`
	// Bind address for the server
	Address string `def:"0.0.0.0" help:"Listening address of rksync-ca-server"`
	// Enables  debug logging
	Debug bool `def:"false" opt:"d" help:"Enable debug level logging" hide:"true"`
	// Sets the logging level on the server
	LogLevel string `help:"Set logging level (info, warning, debug, error, fatal)"`
	// CACfg is the default CA's config
	CACfg CAConfig `skip:"true"`
	// TLS for the server's listening endpoint
	TLS ServerTLSConfig
	// Size limit of an acceptable CRL in bytes
	CRLSizeLimit int `def:"51200" help:"Size limit of an acceptable CRL in bytes"`
}

// ServerTLSConfig defines key material for a TLS server
type ServerTLSConfig struct {
	Enabled    bool   `help:"Enable TLS on the listening port"`
	CertFile   string `def:"tls-cert.pem" help:"PEM-encoded TLS certificate file for server's listening port"`
	KeyFile    string `help:"PEM-encoded TLS key for server's listening port"`
	ClientAuth ClientAuth
}

// ClientTLSConfig defines the key material for a TLS client
type ClientTLSConfig struct {
	Enabled   bool     `skip:"true"`
	CertFiles []string `help:"A list of comma-separated PEM-encoded trusted certificate file"`
	Client    KeyCertFiles
}

// KeyCertFiles defines the files need for client on TLS
type KeyCertFiles struct {
	KeyFile  string `help:"PEM-encoded key file when mutual authentication is enabled"`
	CertFile string `help:"PEM-encoded certificate file when mutual anthenticate is enabled"`
}

// ClientAuth defines the key material needed to verify client certificates
type ClientAuth struct {
	Type      string   `def:"noclientcert" help:"Policy the server will follow for TLS Client Authentication"`
	CertFiles []string `help:"A list of comma-separated PEM-encoded trusted certificate files"`
}

// CAConfig is the CA instance's configuration
type CAConfig struct {
	Version      string `skip:"true"`
	CA           CAInfo
	Signing      *cfsslcfg.Signing `skip:"true"`
	CSR          api.CSRInfo
	Intermediate IntermediateCA
	Registry     CAConfigRegistry
	CRL          CRLConfig
	Client       *ClientConfig `skip:"true"`
	DB           CAConfigDB
}

// CAConfigDB is the database part of the server's config
type CAConfigDB struct {
	Type       string `def:"mysql" help:"Type of database"`
	Datasource string `help:"Data source which is database specific"`
}

// CAConfigRegistry is the registry part of the server's config
type CAConfigRegistry struct {
	MaxEnrollments int `def:"-1" help:"Maximum number of enrollments"`
}

// CRLConfig contains configuration options used by the gencrl request handler
type CRLConfig struct {
	Expiry time.Duration `def:"24h" help:"Expiration for the CRL generated by the gencrl request"`
}

// ParentServer contains URL for the parent server and the name of CA inside
// the server to connect to
type ParentServer struct {
	URL    string `opt:"u" help:"URL of the parent rksync-ca-server"`
	CAName string `help:"Name of the CA to connect to"`
}

// IntermediateCA contains parent server information, TLS configuration, and
// enrollment request for an intermediate CA
type IntermediateCA struct {
	ParentServer ParentServer
	TLS          ClientTLSConfig
}

// CAInfo is the CA information on a rksync-ca
type CAInfo struct {
	Name      string `opt:"n" help:"Certificate Authority name"`
	Keyfile   string `help:"PEM-encoded CA key file"`
	Certfile  string `def:"ca-cert.pem" help:"PEM-encoded CA certificate file"`
	Chainfile string `def:"ca-chain.pem" help:"PEM-encoded CA chain file"`
}

// UnmarshalConfig unmarshals a configuration file
func UnmarshalConfig(cfg interface{}, vp *viper.Viper, configFile string, server bool) error {
	vp.SetConfigFile(configFile)
	err := vp.ReadInConfig()
	if err != nil {
		return errors.Wrapf(err, "Failed to read config file '%s'", configFile)
	}

	err = vp.Unmarshal(cfg)
	if err != nil {
		return errors.Wrapf(err, "Incorrect format in file '%s'", configFile)
	}

	if server {
		serverCfg := cfg.(*ServerConfig)
		err = vp.Unmarshal(&serverCfg.CACfg)
		if err != nil {
			return errors.Wrapf(err, "Incorrect format in file '%s'", configFile)
		}
	}
	return nil
}
